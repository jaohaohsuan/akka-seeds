---
{{- $membersPath := printf "/members/akka.tcp://%s@${POD_NAME}.%s:%v" .Values.actorsystem (include "urisuffix" .) .Values.service.internalPort }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
data:
  pre-stop.sh: |
    /usr/bin/curl -i -X DELETE http://127.0.0.1:{{ .Values.clusterHttpManPort }}{{ $membersPath }}
    /usr/bin/curl -i -X PUT -F 'operation=Down' http://127.0.0.1:{{ .Values.clusterHttpManPort }}{{ $membersPath }}
  healthz.sh: |
    /usr/bin/curl -i http://127.0.0.1:{{ .Values.clusterHttpManPort }}{{ $membersPath }}
  akka.conf: |
    akka {

      loggers = ["akka.event.slf4j.Slf4jLogger"]
      logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
      loglevel = "INFO"
      log-config-on-start = off

      actor {
        provider = "cluster"
        serialize-messages = on
        serializers {
          proto = "akka.remote.serialization.ProtobufSerializer"
        }

        serialization-bindings {
          "com.trueaccord.scalapb.GeneratedMessage" = proto
        }
      }

      remote {
        log-remote-lifecycle-events = off
        netty.tcp {
          hostname = ${?POD_NAME}.{{ include "urisuffix" . }}
          prot = {{ .Values.service.internalPort }}
        }
      }

      cluster {
        {{- $replicas := ( .Values.replicaCount | int ) }}
        {{- $fmt := printf "akka.tcp://%s@%s-%%d.%s:%d" .Values.actorsystem .Values.seedHostNamePrefix (include "urisuffix" .) ( .Values.service.internalPort | int ) }}
        seed-nodes = [
        {{- range $e := until $replicas }}
          "{{ printf $fmt $e }}"
          {{- if ne $replicas (add1 $e) -}}
          ,
          {{- end }}
        {{- end }}
        ]

        log-info = on

        metrics.enabled = off

        http {
          management {
            hostname = "127.0.0.1"
            port = {{ .Values.clusterHttpManPort }}
          }
        }
      }

      extensions = [
        "akka.cluster.metrics.ClusterMetricsExtension"
      ]
    }

    cluster {
      name = "{{ .Values.actorsystem }}"
      name = ${?CLUSTER_NAME}
    }